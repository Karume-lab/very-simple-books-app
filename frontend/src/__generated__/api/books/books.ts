/**
 * Generated by orval v7.13.1 🍺
 * Do not edit manually.
 * Very Simple Books API
 * A simple books API
 * OpenAPI spec version: 1.0
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery } from "@tanstack/react-query";

import type { Book, CreateBookDto, UpdateBookDto } from ".././model";

import { axiosInstanceMutator } from "../../../lib/axios-instance";

/**
 * @summary Create a new book
 */
export const booksControllerCreate = (
  createBookDto: CreateBookDto,
  signal?: AbortSignal
) => {
  return axiosInstanceMutator<Book>({
    url: `/api/books`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createBookDto,
    signal,
  });
};

export const getBooksControllerCreateMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof booksControllerCreate>>,
    TError,
    { data: CreateBookDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof booksControllerCreate>>,
  TError,
  { data: CreateBookDto },
  TContext
> => {
  const mutationKey = ["booksControllerCreate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof booksControllerCreate>>,
    { data: CreateBookDto }
  > = (props) => {
    const { data } = props ?? {};

    return booksControllerCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type BooksControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof booksControllerCreate>>
>;
export type BooksControllerCreateMutationBody = CreateBookDto;
export type BooksControllerCreateMutationError = unknown;

/**
 * @summary Create a new book
 */
export const useBooksControllerCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof booksControllerCreate>>,
      TError,
      { data: CreateBookDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof booksControllerCreate>>,
  TError,
  { data: CreateBookDto },
  TContext
> => {
  const mutationOptions = getBooksControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get all books
 */
export const booksControllerFindAll = (signal?: AbortSignal) => {
  return axiosInstanceMutator<Book[]>({
    url: `/api/books`,
    method: "GET",
    signal,
  });
};

export const getBooksControllerFindAllQueryKey = () => {
  return [`/api/books`] as const;
};

export const getBooksControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof booksControllerFindAll>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof booksControllerFindAll>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getBooksControllerFindAllQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof booksControllerFindAll>>
  > = ({ signal }) => booksControllerFindAll(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof booksControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type BooksControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof booksControllerFindAll>>
>;
export type BooksControllerFindAllQueryError = unknown;

export function useBooksControllerFindAll<
  TData = Awaited<ReturnType<typeof booksControllerFindAll>>,
  TError = unknown
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof booksControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof booksControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof booksControllerFindAll>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useBooksControllerFindAll<
  TData = Awaited<ReturnType<typeof booksControllerFindAll>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof booksControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof booksControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof booksControllerFindAll>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useBooksControllerFindAll<
  TData = Awaited<ReturnType<typeof booksControllerFindAll>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof booksControllerFindAll>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all books
 */

export function useBooksControllerFindAll<
  TData = Awaited<ReturnType<typeof booksControllerFindAll>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof booksControllerFindAll>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getBooksControllerFindAllQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get a book by ID
 */
export const booksControllerFindOne = (id: number, signal?: AbortSignal) => {
  return axiosInstanceMutator<Book>({
    url: `/api/books/${id}`,
    method: "GET",
    signal,
  });
};

export const getBooksControllerFindOneQueryKey = (id?: number) => {
  return [`/api/books/${id}`] as const;
};

export const getBooksControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof booksControllerFindOne>>,
  TError = unknown
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof booksControllerFindOne>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getBooksControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof booksControllerFindOne>>
  > = ({ signal }) => booksControllerFindOne(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof booksControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type BooksControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof booksControllerFindOne>>
>;
export type BooksControllerFindOneQueryError = unknown;

export function useBooksControllerFindOne<
  TData = Awaited<ReturnType<typeof booksControllerFindOne>>,
  TError = unknown
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof booksControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof booksControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof booksControllerFindOne>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useBooksControllerFindOne<
  TData = Awaited<ReturnType<typeof booksControllerFindOne>>,
  TError = unknown
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof booksControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof booksControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof booksControllerFindOne>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useBooksControllerFindOne<
  TData = Awaited<ReturnType<typeof booksControllerFindOne>>,
  TError = unknown
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof booksControllerFindOne>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a book by ID
 */

export function useBooksControllerFindOne<
  TData = Awaited<ReturnType<typeof booksControllerFindOne>>,
  TError = unknown
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof booksControllerFindOne>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getBooksControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Update a book
 */
export const booksControllerUpdate = (
  id: number,
  updateBookDto: UpdateBookDto
) => {
  return axiosInstanceMutator<Book>({
    url: `/api/books/${id}`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: updateBookDto,
  });
};

export const getBooksControllerUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof booksControllerUpdate>>,
    TError,
    { id: number; data: UpdateBookDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof booksControllerUpdate>>,
  TError,
  { id: number; data: UpdateBookDto },
  TContext
> => {
  const mutationKey = ["booksControllerUpdate"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof booksControllerUpdate>>,
    { id: number; data: UpdateBookDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return booksControllerUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type BooksControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof booksControllerUpdate>>
>;
export type BooksControllerUpdateMutationBody = UpdateBookDto;
export type BooksControllerUpdateMutationError = unknown;

/**
 * @summary Update a book
 */
export const useBooksControllerUpdate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof booksControllerUpdate>>,
      TError,
      { id: number; data: UpdateBookDto },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof booksControllerUpdate>>,
  TError,
  { id: number; data: UpdateBookDto },
  TContext
> => {
  const mutationOptions = getBooksControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete a book
 */
export const booksControllerRemove = (id: number) => {
  return axiosInstanceMutator<void>({
    url: `/api/books/${id}`,
    method: "DELETE",
  });
};

export const getBooksControllerRemoveMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof booksControllerRemove>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof booksControllerRemove>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ["booksControllerRemove"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof booksControllerRemove>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return booksControllerRemove(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type BooksControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof booksControllerRemove>>
>;

export type BooksControllerRemoveMutationError = unknown;

/**
 * @summary Delete a book
 */
export const useBooksControllerRemove = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof booksControllerRemove>>,
      TError,
      { id: number },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof booksControllerRemove>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getBooksControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
